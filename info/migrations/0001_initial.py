# Generated by Django 3.1.4 on 2020-12-29 15:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import info.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, unique=True, verbose_name='email address')),
                ('mobile_no', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(code='invalid_number', message='Number should be 10 digit', regex='[1-9]{1}[0-9]{9}')])),
                ('full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('relation', models.CharField(blank=True, max_length=10, null=True)),
                ('gender', models.CharField(blank=True, max_length=6, null=True)),
                ('profile_active', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProfileImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=info.models.user_directory_path)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='img', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('navaras', models.CharField(blank=True, max_length=50, null=True)),
                ('maritial_status', models.CharField(blank=True, max_length=50, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('weight', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('body_type', models.CharField(blank=True, max_length=20, null=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('blood_group', models.CharField(blank=True, max_length=10, null=True)),
                ('mother_tongue', models.CharField(blank=True, max_length=30, null=True)),
                ('annual_income', models.CharField(blank=True, max_length=20, null=True)),
                ('religion', models.CharField(blank=True, max_length=30, null=True)),
                ('caste', models.CharField(blank=True, max_length=20, null=True)),
                ('sub_caste', models.CharField(blank=True, max_length=20, null=True)),
                ('birthplace', models.CharField(blank=True, max_length=50, null=True)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('occupation_detail', models.CharField(blank=True, max_length=200, null=True)),
                ('education', models.CharField(blank=True, max_length=100, null=True)),
                ('education_detail', models.CharField(blank=True, max_length=200, null=True)),
                ('drink_habit', models.CharField(blank=True, max_length=20, null=True)),
                ('smoke_habit', models.CharField(blank=True, max_length=20, null=True)),
                ('eating_habits', models.CharField(blank=True, max_length=100, null=True)),
                ('hobbies', models.CharField(blank=True, max_length=100, null=True)),
                ('devak', models.CharField(blank=True, max_length=100, null=True)),
                ('mana', models.CharField(blank=True, max_length=100, null=True)),
                ('nadi', models.CharField(blank=True, max_length=100, null=True)),
                ('rassi', models.CharField(blank=True, max_length=100, null=True)),
                ('father_name', models.CharField(blank=True, max_length=100, null=True)),
                ('father_occupation', models.CharField(blank=True, max_length=200, null=True)),
                ('mother_name', models.CharField(blank=True, max_length=100, null=True)),
                ('brother_count', models.PositiveSmallIntegerField(default=0)),
                ('sister_count', models.PositiveSmallIntegerField(default=0)),
                ('uncle_count', models.PositiveSmallIntegerField(default=0)),
                ('atya_count', models.PositiveSmallIntegerField(default=0)),
                ('mavasi_count', models.PositiveSmallIntegerField(default=0)),
                ('other_relatives', models.CharField(blank=True, max_length=100, null=True)),
                ('address_line1', models.CharField(max_length=200)),
                ('address_line2', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(max_length=100)),
                ('zipcode', models.PositiveIntegerField()),
                ('district', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('current_location', models.CharField(max_length=200)),
                ('views', models.IntegerField(default=0)),
                ('expectations', models.CharField(blank=True, max_length=200, null=True)),
                ('paid', models.BooleanField(default=False)),
                ('paid_file', models.FileField(blank=True, null=True, upload_to='')),
                ('agree_tnc', models.BooleanField()),
                ('requested', models.ManyToManyField(blank=True, related_name='request', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['views'],
            },
        ),
    ]
